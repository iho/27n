// Code generated by go-swagger; DO NOT EDIT.

package benchmarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetBenchmarksReader is a Reader for the GetBenchmarks structure.
type GetBenchmarksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBenchmarksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBenchmarksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBenchmarksOK creates a GetBenchmarksOK with default headers values
func NewGetBenchmarksOK() *GetBenchmarksOK {
	return &GetBenchmarksOK{}
}

/* GetBenchmarksOK describes a response with status code 200, with default header values.

Success
*/
type GetBenchmarksOK struct {
	Payload *GetBenchmarksOKBody
}

func (o *GetBenchmarksOK) Error() string {
	return fmt.Sprintf("[GET /benchmarks][%d] getBenchmarksOK  %+v", 200, o.Payload)
}
func (o *GetBenchmarksOK) GetPayload() *GetBenchmarksOKBody {
	return o.Payload
}

func (o *GetBenchmarksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBenchmarksOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetBenchmarksOKBody get benchmarks o k body
swagger:model GetBenchmarksOKBody
*/
type GetBenchmarksOKBody struct {

	// The ID value of the hero played
	HeroID int64 `json:"hero_id,omitempty"`

	// result
	Result *GetBenchmarksOKBodyResult `json:"result,omitempty"`
}

// Validate validates this get benchmarks o k body
func (o *GetBenchmarksOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBenchmarksOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBenchmarksOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get benchmarks o k body based on the context it is used
func (o *GetBenchmarksOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBenchmarksOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBenchmarksOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBody) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResult result
swagger:model GetBenchmarksOKBodyResult
*/
type GetBenchmarksOKBodyResult struct {

	// gold per min
	GoldPerMin []*GetBenchmarksOKBodyResultGoldPerMinItems0 `json:"gold_per_min"`

	// hero damage per min
	HeroDamagePerMin []*GetBenchmarksOKBodyResultHeroDamagePerMinItems0 `json:"hero_damage_per_min"`

	// hero healing per min
	HeroHealingPerMin []*GetBenchmarksOKBodyResultHeroHealingPerMinItems0 `json:"hero_healing_per_min"`

	// kills per min
	KillsPerMin []*GetBenchmarksOKBodyResultKillsPerMinItems0 `json:"kills_per_min"`

	// last hits per min
	LastHitsPerMin []*GetBenchmarksOKBodyResultLastHitsPerMinItems0 `json:"last_hits_per_min"`

	// tower damage
	TowerDamage []*GetBenchmarksOKBodyResultTowerDamageItems0 `json:"tower_damage"`

	// xp per min
	XpPerMin []*GetBenchmarksOKBodyResultXpPerMinItems0 `json:"xp_per_min"`
}

// Validate validates this get benchmarks o k body result
func (o *GetBenchmarksOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGoldPerMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeroDamagePerMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeroHealingPerMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKillsPerMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastHitsPerMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTowerDamage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateXpPerMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBenchmarksOKBodyResult) validateGoldPerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.GoldPerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.GoldPerMin); i++ {
		if swag.IsZero(o.GoldPerMin[i]) { // not required
			continue
		}

		if o.GoldPerMin[i] != nil {
			if err := o.GoldPerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "gold_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateHeroDamagePerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.HeroDamagePerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.HeroDamagePerMin); i++ {
		if swag.IsZero(o.HeroDamagePerMin[i]) { // not required
			continue
		}

		if o.HeroDamagePerMin[i] != nil {
			if err := o.HeroDamagePerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "hero_damage_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateHeroHealingPerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.HeroHealingPerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.HeroHealingPerMin); i++ {
		if swag.IsZero(o.HeroHealingPerMin[i]) { // not required
			continue
		}

		if o.HeroHealingPerMin[i] != nil {
			if err := o.HeroHealingPerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "hero_healing_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateKillsPerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.KillsPerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.KillsPerMin); i++ {
		if swag.IsZero(o.KillsPerMin[i]) { // not required
			continue
		}

		if o.KillsPerMin[i] != nil {
			if err := o.KillsPerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "kills_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateLastHitsPerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.LastHitsPerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.LastHitsPerMin); i++ {
		if swag.IsZero(o.LastHitsPerMin[i]) { // not required
			continue
		}

		if o.LastHitsPerMin[i] != nil {
			if err := o.LastHitsPerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "last_hits_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateTowerDamage(formats strfmt.Registry) error {
	if swag.IsZero(o.TowerDamage) { // not required
		return nil
	}

	for i := 0; i < len(o.TowerDamage); i++ {
		if swag.IsZero(o.TowerDamage[i]) { // not required
			continue
		}

		if o.TowerDamage[i] != nil {
			if err := o.TowerDamage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "tower_damage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) validateXpPerMin(formats strfmt.Registry) error {
	if swag.IsZero(o.XpPerMin) { // not required
		return nil
	}

	for i := 0; i < len(o.XpPerMin); i++ {
		if swag.IsZero(o.XpPerMin[i]) { // not required
			continue
		}

		if o.XpPerMin[i] != nil {
			if err := o.XpPerMin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "xp_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get benchmarks o k body result based on the context it is used
func (o *GetBenchmarksOKBodyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGoldPerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHeroDamagePerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHeroHealingPerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKillsPerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastHitsPerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTowerDamage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateXpPerMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateGoldPerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.GoldPerMin); i++ {

		if o.GoldPerMin[i] != nil {
			if err := o.GoldPerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "gold_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateHeroDamagePerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.HeroDamagePerMin); i++ {

		if o.HeroDamagePerMin[i] != nil {
			if err := o.HeroDamagePerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "hero_damage_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateHeroHealingPerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.HeroHealingPerMin); i++ {

		if o.HeroHealingPerMin[i] != nil {
			if err := o.HeroHealingPerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "hero_healing_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateKillsPerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KillsPerMin); i++ {

		if o.KillsPerMin[i] != nil {
			if err := o.KillsPerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "kills_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateLastHitsPerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LastHitsPerMin); i++ {

		if o.LastHitsPerMin[i] != nil {
			if err := o.LastHitsPerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "last_hits_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateTowerDamage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TowerDamage); i++ {

		if o.TowerDamage[i] != nil {
			if err := o.TowerDamage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "tower_damage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBenchmarksOKBodyResult) contextValidateXpPerMin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.XpPerMin); i++ {

		if o.XpPerMin[i] != nil {
			if err := o.XpPerMin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBenchmarksOK" + "." + "result" + "." + "xp_per_min" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultGoldPerMinItems0 get benchmarks o k body result gold per min items0
swagger:model GetBenchmarksOKBodyResultGoldPerMinItems0
*/
type GetBenchmarksOKBodyResultGoldPerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result gold per min items0
func (o *GetBenchmarksOKBodyResultGoldPerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result gold per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultGoldPerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultGoldPerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultGoldPerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultGoldPerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultHeroDamagePerMinItems0 get benchmarks o k body result hero damage per min items0
swagger:model GetBenchmarksOKBodyResultHeroDamagePerMinItems0
*/
type GetBenchmarksOKBodyResultHeroDamagePerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result hero damage per min items0
func (o *GetBenchmarksOKBodyResultHeroDamagePerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result hero damage per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultHeroDamagePerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultHeroDamagePerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultHeroDamagePerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultHeroDamagePerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultHeroHealingPerMinItems0 get benchmarks o k body result hero healing per min items0
swagger:model GetBenchmarksOKBodyResultHeroHealingPerMinItems0
*/
type GetBenchmarksOKBodyResultHeroHealingPerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result hero healing per min items0
func (o *GetBenchmarksOKBodyResultHeroHealingPerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result hero healing per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultHeroHealingPerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultHeroHealingPerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultHeroHealingPerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultHeroHealingPerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultKillsPerMinItems0 get benchmarks o k body result kills per min items0
swagger:model GetBenchmarksOKBodyResultKillsPerMinItems0
*/
type GetBenchmarksOKBodyResultKillsPerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result kills per min items0
func (o *GetBenchmarksOKBodyResultKillsPerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result kills per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultKillsPerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultKillsPerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultKillsPerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultKillsPerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultLastHitsPerMinItems0 get benchmarks o k body result last hits per min items0
swagger:model GetBenchmarksOKBodyResultLastHitsPerMinItems0
*/
type GetBenchmarksOKBodyResultLastHitsPerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result last hits per min items0
func (o *GetBenchmarksOKBodyResultLastHitsPerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result last hits per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultLastHitsPerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultLastHitsPerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultLastHitsPerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultLastHitsPerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultTowerDamageItems0 get benchmarks o k body result tower damage items0
swagger:model GetBenchmarksOKBodyResultTowerDamageItems0
*/
type GetBenchmarksOKBodyResultTowerDamageItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result tower damage items0
func (o *GetBenchmarksOKBodyResultTowerDamageItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result tower damage items0 based on context it is used
func (o *GetBenchmarksOKBodyResultTowerDamageItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultTowerDamageItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultTowerDamageItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultTowerDamageItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBenchmarksOKBodyResultXpPerMinItems0 get benchmarks o k body result xp per min items0
swagger:model GetBenchmarksOKBodyResultXpPerMinItems0
*/
type GetBenchmarksOKBodyResultXpPerMinItems0 struct {

	// percentile
	Percentile float64 `json:"percentile,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this get benchmarks o k body result xp per min items0
func (o *GetBenchmarksOKBodyResultXpPerMinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get benchmarks o k body result xp per min items0 based on context it is used
func (o *GetBenchmarksOKBodyResultXpPerMinItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultXpPerMinItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBenchmarksOKBodyResultXpPerMinItems0) UnmarshalBinary(b []byte) error {
	var res GetBenchmarksOKBodyResultXpPerMinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
