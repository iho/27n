// Code generated by go-swagger; DO NOT EDIT.

package public_matches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublicMatchesParams creates a new GetPublicMatchesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPublicMatchesParams() *GetPublicMatchesParams {
	return &GetPublicMatchesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicMatchesParamsWithTimeout creates a new GetPublicMatchesParams object
// with the ability to set a timeout on a request.
func NewGetPublicMatchesParamsWithTimeout(timeout time.Duration) *GetPublicMatchesParams {
	return &GetPublicMatchesParams{
		timeout: timeout,
	}
}

// NewGetPublicMatchesParamsWithContext creates a new GetPublicMatchesParams object
// with the ability to set a context for a request.
func NewGetPublicMatchesParamsWithContext(ctx context.Context) *GetPublicMatchesParams {
	return &GetPublicMatchesParams{
		Context: ctx,
	}
}

// NewGetPublicMatchesParamsWithHTTPClient creates a new GetPublicMatchesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPublicMatchesParamsWithHTTPClient(client *http.Client) *GetPublicMatchesParams {
	return &GetPublicMatchesParams{
		HTTPClient: client,
	}
}

/* GetPublicMatchesParams contains all the parameters to send to the API endpoint
   for the get public matches operation.

   Typically these are written to a http.Request.
*/
type GetPublicMatchesParams struct {

	/* LessThanMatchID.

	   Get matches with a match ID lower than this value
	*/
	LessThanMatchID *int64

	/* MmrAscending.

	   Order by MMR ascending
	*/
	MmrAscending *int64

	/* MmrDescending.

	   Order by MMR descending
	*/
	MmrDescending *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get public matches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPublicMatchesParams) WithDefaults() *GetPublicMatchesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get public matches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPublicMatchesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get public matches params
func (o *GetPublicMatchesParams) WithTimeout(timeout time.Duration) *GetPublicMatchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public matches params
func (o *GetPublicMatchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public matches params
func (o *GetPublicMatchesParams) WithContext(ctx context.Context) *GetPublicMatchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public matches params
func (o *GetPublicMatchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public matches params
func (o *GetPublicMatchesParams) WithHTTPClient(client *http.Client) *GetPublicMatchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public matches params
func (o *GetPublicMatchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLessThanMatchID adds the lessThanMatchID to the get public matches params
func (o *GetPublicMatchesParams) WithLessThanMatchID(lessThanMatchID *int64) *GetPublicMatchesParams {
	o.SetLessThanMatchID(lessThanMatchID)
	return o
}

// SetLessThanMatchID adds the lessThanMatchId to the get public matches params
func (o *GetPublicMatchesParams) SetLessThanMatchID(lessThanMatchID *int64) {
	o.LessThanMatchID = lessThanMatchID
}

// WithMmrAscending adds the mmrAscending to the get public matches params
func (o *GetPublicMatchesParams) WithMmrAscending(mmrAscending *int64) *GetPublicMatchesParams {
	o.SetMmrAscending(mmrAscending)
	return o
}

// SetMmrAscending adds the mmrAscending to the get public matches params
func (o *GetPublicMatchesParams) SetMmrAscending(mmrAscending *int64) {
	o.MmrAscending = mmrAscending
}

// WithMmrDescending adds the mmrDescending to the get public matches params
func (o *GetPublicMatchesParams) WithMmrDescending(mmrDescending *int64) *GetPublicMatchesParams {
	o.SetMmrDescending(mmrDescending)
	return o
}

// SetMmrDescending adds the mmrDescending to the get public matches params
func (o *GetPublicMatchesParams) SetMmrDescending(mmrDescending *int64) {
	o.MmrDescending = mmrDescending
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicMatchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LessThanMatchID != nil {

		// query param less_than_match_id
		var qrLessThanMatchID int64

		if o.LessThanMatchID != nil {
			qrLessThanMatchID = *o.LessThanMatchID
		}
		qLessThanMatchID := swag.FormatInt64(qrLessThanMatchID)
		if qLessThanMatchID != "" {

			if err := r.SetQueryParam("less_than_match_id", qLessThanMatchID); err != nil {
				return err
			}
		}
	}

	if o.MmrAscending != nil {

		// query param mmr_ascending
		var qrMmrAscending int64

		if o.MmrAscending != nil {
			qrMmrAscending = *o.MmrAscending
		}
		qMmrAscending := swag.FormatInt64(qrMmrAscending)
		if qMmrAscending != "" {

			if err := r.SetQueryParam("mmr_ascending", qMmrAscending); err != nil {
				return err
			}
		}
	}

	if o.MmrDescending != nil {

		// query param mmr_descending
		var qrMmrDescending int64

		if o.MmrDescending != nil {
			qrMmrDescending = *o.MmrDescending
		}
		qMmrDescending := swag.FormatInt64(qrMmrDescending)
		if qMmrDescending != "" {

			if err := r.SetQueryParam("mmr_descending", qMmrDescending); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
