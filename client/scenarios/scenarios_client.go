// Code generated by go-swagger; DO NOT EDIT.

package scenarios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scenarios API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scenarios API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetScenariosItemTimings(params *GetScenariosItemTimingsParams, opts ...ClientOption) (*GetScenariosItemTimingsOK, error)

	GetScenariosLaneRoles(params *GetScenariosLaneRolesParams, opts ...ClientOption) (*GetScenariosLaneRolesOK, error)

	GetScenariosMisc(params *GetScenariosMiscParams, opts ...ClientOption) (*GetScenariosMiscOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetScenariosItemTimings gs e t scenarios item timings

  Win rates for certain item timings on a hero for items that cost at least 1400 gold
*/
func (a *Client) GetScenariosItemTimings(params *GetScenariosItemTimingsParams, opts ...ClientOption) (*GetScenariosItemTimingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScenariosItemTimingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScenariosItemTimings",
		Method:             "GET",
		PathPattern:        "/scenarios/itemTimings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScenariosItemTimingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScenariosItemTimingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScenariosItemTimings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScenariosLaneRoles gs e t scenarios lane roles

  Win rates for heroes in certain lane roles
*/
func (a *Client) GetScenariosLaneRoles(params *GetScenariosLaneRolesParams, opts ...ClientOption) (*GetScenariosLaneRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScenariosLaneRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScenariosLaneRoles",
		Method:             "GET",
		PathPattern:        "/scenarios/laneRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScenariosLaneRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScenariosLaneRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScenariosLaneRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScenariosMisc gs e t scenarios misc

  Miscellaneous team scenarios
*/
func (a *Client) GetScenariosMisc(params *GetScenariosMiscParams, opts ...ClientOption) (*GetScenariosMiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScenariosMiscParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScenariosMisc",
		Method:             "GET",
		PathPattern:        "/scenarios/misc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScenariosMiscReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScenariosMiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScenariosMisc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
