// Code generated by go-swagger; DO NOT EDIT.

package heroes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new heroes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for heroes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetHeroes(params *GetHeroesParams, opts ...ClientOption) (*GetHeroesOK, error)

	GetHeroesHeroIDDurations(params *GetHeroesHeroIDDurationsParams, opts ...ClientOption) (*GetHeroesHeroIDDurationsOK, error)

	GetHeroesHeroIDItemPopularity(params *GetHeroesHeroIDItemPopularityParams, opts ...ClientOption) (*GetHeroesHeroIDItemPopularityOK, error)

	GetHeroesHeroIDMatches(params *GetHeroesHeroIDMatchesParams, opts ...ClientOption) (*GetHeroesHeroIDMatchesOK, error)

	GetHeroesHeroIDMatchups(params *GetHeroesHeroIDMatchupsParams, opts ...ClientOption) (*GetHeroesHeroIDMatchupsOK, error)

	GetHeroesHeroIDPlayers(params *GetHeroesHeroIDPlayersParams, opts ...ClientOption) (*GetHeroesHeroIDPlayersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetHeroes gs e t heroes

  Get hero data
*/
func (a *Client) GetHeroes(params *GetHeroesParams, opts ...ClientOption) (*GetHeroesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroes",
		Method:             "GET",
		PathPattern:        "/heroes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeroesHeroIDDurations gs e t heroes hero id durations

  Get hero performance over a range of match durations
*/
func (a *Client) GetHeroesHeroIDDurations(params *GetHeroesHeroIDDurationsParams, opts ...ClientOption) (*GetHeroesHeroIDDurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesHeroIDDurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroesHeroIDDurations",
		Method:             "GET",
		PathPattern:        "/heroes/{hero_id}/durations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesHeroIDDurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesHeroIDDurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroesHeroIDDurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeroesHeroIDItemPopularity gs e t heroes hero id item popularity

  Get item popularity of hero categoried by start, early, mid and late game, analyzed from professional games
*/
func (a *Client) GetHeroesHeroIDItemPopularity(params *GetHeroesHeroIDItemPopularityParams, opts ...ClientOption) (*GetHeroesHeroIDItemPopularityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesHeroIDItemPopularityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroesHeroIDItemPopularity",
		Method:             "GET",
		PathPattern:        "/heroes/{hero_id}/itemPopularity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesHeroIDItemPopularityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesHeroIDItemPopularityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroesHeroIDItemPopularity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeroesHeroIDMatches gs e t heroes hero id matches

  Get recent matches with a hero
*/
func (a *Client) GetHeroesHeroIDMatches(params *GetHeroesHeroIDMatchesParams, opts ...ClientOption) (*GetHeroesHeroIDMatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesHeroIDMatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroesHeroIDMatches",
		Method:             "GET",
		PathPattern:        "/heroes/{hero_id}/matches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesHeroIDMatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesHeroIDMatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroesHeroIDMatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeroesHeroIDMatchups gs e t heroes hero id matchups

  Get results against other heroes for a hero
*/
func (a *Client) GetHeroesHeroIDMatchups(params *GetHeroesHeroIDMatchupsParams, opts ...ClientOption) (*GetHeroesHeroIDMatchupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesHeroIDMatchupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroesHeroIDMatchups",
		Method:             "GET",
		PathPattern:        "/heroes/{hero_id}/matchups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesHeroIDMatchupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesHeroIDMatchupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroesHeroIDMatchups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeroesHeroIDPlayers gs e t heroes hero id players

  Get players who have played this hero
*/
func (a *Client) GetHeroesHeroIDPlayers(params *GetHeroesHeroIDPlayersParams, opts ...ClientOption) (*GetHeroesHeroIDPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeroesHeroIDPlayersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHeroesHeroIDPlayers",
		Method:             "GET",
		PathPattern:        "/heroes/{hero_id}/players",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeroesHeroIDPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeroesHeroIDPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHeroesHeroIDPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
