// Code generated by go-swagger; DO NOT EDIT.

package heroes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetHeroesHeroIDPlayersReader is a Reader for the GetHeroesHeroIDPlayers structure.
type GetHeroesHeroIDPlayersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHeroesHeroIDPlayersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHeroesHeroIDPlayersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHeroesHeroIDPlayersOK creates a GetHeroesHeroIDPlayersOK with default headers values
func NewGetHeroesHeroIDPlayersOK() *GetHeroesHeroIDPlayersOK {
	return &GetHeroesHeroIDPlayersOK{}
}

/* GetHeroesHeroIDPlayersOK describes a response with status code 200, with default header values.

Success
*/
type GetHeroesHeroIDPlayersOK struct {
	Payload [][]*GetHeroesHeroIDPlayersOKBodyItems0
}

func (o *GetHeroesHeroIDPlayersOK) Error() string {
	return fmt.Sprintf("[GET /heroes/{hero_id}/players][%d] getHeroesHeroIdPlayersOK  %+v", 200, o.Payload)
}
func (o *GetHeroesHeroIDPlayersOK) GetPayload() [][]*GetHeroesHeroIDPlayersOKBodyItems0 {
	return o.Payload
}

func (o *GetHeroesHeroIDPlayersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetHeroesHeroIDPlayersOKBodyItems0 get heroes hero ID players o k body items0
swagger:model GetHeroesHeroIDPlayersOKBodyItems0
*/
type GetHeroesHeroIDPlayersOKBodyItems0 struct {

	// Player's account identifier
	AccountID int64 `json:"account_id,omitempty"`

	// Steam picture URL (small picture)
	Avatar string `json:"avatar,omitempty"`

	// Steam picture URL (full picture)
	Avatarfull string `json:"avatarfull,omitempty"`

	// Steam picture URL (medium picture)
	Avatarmedium string `json:"avatarmedium,omitempty"`

	// Amount of dollars the player has donated to OpenDota
	Cheese int64 `json:"cheese,omitempty"`

	// Player's country code
	CountryCode string `json:"country_code,omitempty"`

	// Player's ingame role (core: 1 or support: 2)
	FantasyRole int64 `json:"fantasy_role,omitempty"`

	// Whether the refresh of player' match history failed
	FhUnavailable bool `json:"fh_unavailable,omitempty"`

	// Date and time of last request to refresh player's match history
	// Format: date-time
	FullHistoryTime strfmt.DateTime `json:"full_history_time,omitempty"`

	// Whether the roster lock is active
	IsLocked bool `json:"is_locked,omitempty"`

	// Whether the player is professional or not
	IsPro bool `json:"is_pro,omitempty"`

	// Date and time of last login to OpenDota
	// Format: date-time
	LastLogin strfmt.DateTime `json:"last_login,omitempty"`

	// Player's country identifier, e.g. US
	Loccountrycode string `json:"loccountrycode,omitempty"`

	// When the roster lock will end
	LockedUntil int64 `json:"locked_until,omitempty"`

	// Verified player name, e.g. 'Miracle-'
	Name string `json:"name,omitempty"`

	// Player's Steam name
	Personaname string `json:"personaname,omitempty"`

	// Steam profile URL
	Profileurl string `json:"profileurl,omitempty"`

	// Player's steam identifier
	Steamid string `json:"steamid,omitempty"`

	// Player's team identifier
	TeamID int64 `json:"team_id,omitempty"`

	// Player's team name, e.g. 'Evil Geniuses'
	TeamName string `json:"team_name,omitempty"`

	// Player's team shorthand tag, e.g. 'EG'
	TeamTag string `json:"team_tag,omitempty"`
}

// Validate validates this get heroes hero ID players o k body items0
func (o *GetHeroesHeroIDPlayersOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFullHistoryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHeroesHeroIDPlayersOKBodyItems0) validateFullHistoryTime(formats strfmt.Registry) error {
	if swag.IsZero(o.FullHistoryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("full_history_time", "body", "date-time", o.FullHistoryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetHeroesHeroIDPlayersOKBodyItems0) validateLastLogin(formats strfmt.Registry) error {
	if swag.IsZero(o.LastLogin) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login", "body", "date-time", o.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get heroes hero ID players o k body items0 based on context it is used
func (o *GetHeroesHeroIDPlayersOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetHeroesHeroIDPlayersOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHeroesHeroIDPlayersOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetHeroesHeroIDPlayersOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
