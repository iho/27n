// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetTeams(params *GetTeamsParams, opts ...ClientOption) (*GetTeamsOK, error)

	GetTeamsTeamID(params *GetTeamsTeamIDParams, opts ...ClientOption) (*GetTeamsTeamIDOK, error)

	GetTeamsTeamIDHeroes(params *GetTeamsTeamIDHeroesParams, opts ...ClientOption) (*GetTeamsTeamIDHeroesOK, error)

	GetTeamsTeamIDMatches(params *GetTeamsTeamIDMatchesParams, opts ...ClientOption) (*GetTeamsTeamIDMatchesOK, error)

	GetTeamsTeamIDPlayers(params *GetTeamsTeamIDPlayersParams, opts ...ClientOption) (*GetTeamsTeamIDPlayersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetTeams gs e t teams

  Get team data
*/
func (a *Client) GetTeams(params *GetTeamsParams, opts ...ClientOption) (*GetTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsTeamID gs e t teams team id

  Get data for a team
*/
func (a *Client) GetTeamsTeamID(params *GetTeamsTeamIDParams, opts ...ClientOption) (*GetTeamsTeamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsTeamIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamsTeamID",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamsTeamIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsTeamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsTeamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsTeamIDHeroes gs e t teams team id heroes

  Get heroes for a team
*/
func (a *Client) GetTeamsTeamIDHeroes(params *GetTeamsTeamIDHeroesParams, opts ...ClientOption) (*GetTeamsTeamIDHeroesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsTeamIDHeroesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamsTeamIDHeroes",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/heroes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamsTeamIDHeroesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsTeamIDHeroesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsTeamIDHeroes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsTeamIDMatches gs e t teams team id matches

  Get matches for a team
*/
func (a *Client) GetTeamsTeamIDMatches(params *GetTeamsTeamIDMatchesParams, opts ...ClientOption) (*GetTeamsTeamIDMatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsTeamIDMatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamsTeamIDMatches",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/matches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamsTeamIDMatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsTeamIDMatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsTeamIDMatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsTeamIDPlayers gs e t teams team id players

  Get players who have played for a team
*/
func (a *Client) GetTeamsTeamIDPlayers(params *GetTeamsTeamIDPlayersParams, opts ...ClientOption) (*GetTeamsTeamIDPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsTeamIDPlayersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamsTeamIDPlayers",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/players",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamsTeamIDPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsTeamIDPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsTeamIDPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
